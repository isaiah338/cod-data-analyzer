// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using cod_data_analyzer.Data;

#nullable disable

namespace cod_data_analyzer.Migrations
{
    [DbContext(typeof(MultiplayerDataDatabaseContext))]
    partial class MultiplayerDataDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("cod_data_analyzer.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("cod_data_analyzer.Models.GameMode", b =>
                {
                    b.Property<int>("GameModeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameModeId"));

                    b.Property<string>("GameModeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GameTitleId")
                        .HasColumnType("int");

                    b.Property<int>("GameTypeId")
                        .HasColumnType("int");

                    b.HasKey("GameModeId");

                    b.HasIndex("GameTitleId");

                    b.HasIndex("GameTypeId");

                    b.ToTable("GameMode");
                });

            modelBuilder.Entity("cod_data_analyzer.Models.GameTitle", b =>
                {
                    b.Property<int>("GameTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameTitleId"));

                    b.Property<string>("GameTitleCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GameTitleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GameTitleId");

                    b.ToTable("GameTitle");
                });

            modelBuilder.Entity("cod_data_analyzer.Models.GameType", b =>
                {
                    b.Property<int>("GameTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameTypeId"));

                    b.Property<string>("GameTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GameTypeId");

                    b.ToTable("GameType");
                });

            modelBuilder.Entity("cod_data_analyzer.Models.LifetimeStats", b =>
                {
                    b.Property<int>("LifetimeStatsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LifetimeStatsId"));

                    b.Property<int>("LifetimeDeaths")
                        .HasColumnType("int");

                    b.Property<int>("LifetimeHits")
                        .HasColumnType("int");

                    b.Property<int>("LifetimeKills")
                        .HasColumnType("int");

                    b.Property<int>("LifetimeLosses")
                        .HasColumnType("int");

                    b.Property<int>("LifetimeMisses")
                        .HasColumnType("int");

                    b.Property<int>("LifetimeWins")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.HasKey("LifetimeStatsId");

                    b.HasIndex("MatchId")
                        .IsUnique();

                    b.ToTable("LifetimeStats");
                });

            modelBuilder.Entity("cod_data_analyzer.Models.Map", b =>
                {
                    b.Property<int>("MapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MapId"));

                    b.Property<bool>("IsFaceoff")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSmall")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpecialty")
                        .HasColumnType("bit");

                    b.Property<string>("MapName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MapId");

                    b.ToTable("Map");
                });

            modelBuilder.Entity("cod_data_analyzer.Models.Match", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchId"));

                    b.Property<int>("GameModeId")
                        .HasColumnType("int");

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MatchEnd")
                        .HasColumnType("datetime2");

                    b.Property<int>("MatchLength")
                        .HasColumnType("int");

                    b.Property<DateTime>("MatchStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("MatchWin")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MatchId");

                    b.HasIndex("GameModeId");

                    b.HasIndex("MapId");

                    b.HasIndex("UserId");

                    b.ToTable("Match");
                });

            modelBuilder.Entity("cod_data_analyzer.Models.PlayerStats", b =>
                {
                    b.Property<int>("PlayerStatsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerStatsId"));

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<int>("DamageDone")
                        .HasColumnType("int");

                    b.Property<int>("Deaths")
                        .HasColumnType("int");

                    b.Property<int>("Executions")
                        .HasColumnType("int");

                    b.Property<int>("Headshots")
                        .HasColumnType("int");

                    b.Property<int>("Hits")
                        .HasColumnType("int");

                    b.Property<int>("Kills")
                        .HasColumnType("int");

                    b.Property<int>("LongestStreak")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<double>("PercentTimeMoving")
                        .HasColumnType("float");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("Shots")
                        .HasColumnType("int");

                    b.Property<int>("Skill")
                        .HasColumnType("int");

                    b.Property<int>("Suicides")
                        .HasColumnType("int");

                    b.HasKey("PlayerStatsId");

                    b.HasIndex("MatchId")
                        .IsUnique();

                    b.ToTable("PlayerStats");
                });

            modelBuilder.Entity("cod_data_analyzer.Models.XpStats", b =>
                {
                    b.Property<int>("XpStatsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("XpStatsId"));

                    b.Property<int>("AccoladeXp")
                        .HasColumnType("int");

                    b.Property<int>("BattlepassXp")
                        .HasColumnType("int");

                    b.Property<int>("ChallengeXp")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("MatchXp")
                        .HasColumnType("int");

                    b.Property<int>("MedalXp")
                        .HasColumnType("int");

                    b.Property<int>("MiscXp")
                        .HasColumnType("int");

                    b.Property<int>("OperatorXp")
                        .HasColumnType("int");

                    b.Property<int>("RankEnd")
                        .HasColumnType("int");

                    b.Property<int>("RankStart")
                        .HasColumnType("int");

                    b.Property<int>("ScoreXp")
                        .HasColumnType("int");

                    b.Property<int>("TotalXp")
                        .HasColumnType("int");

                    b.Property<int>("WeaponXp")
                        .HasColumnType("int");

                    b.HasKey("XpStatsId");

                    b.HasIndex("MatchId")
                        .IsUnique();

                    b.ToTable("XpStats");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("cod_data_analyzer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("cod_data_analyzer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cod_data_analyzer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("cod_data_analyzer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cod_data_analyzer.Models.GameMode", b =>
                {
                    b.HasOne("cod_data_analyzer.Models.GameTitle", "GameTitle")
                        .WithMany("GameModes")
                        .HasForeignKey("GameTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cod_data_analyzer.Models.GameType", "GameType")
                        .WithMany("GameModes")
                        .HasForeignKey("GameTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameTitle");

                    b.Navigation("GameType");
                });

            modelBuilder.Entity("cod_data_analyzer.Models.LifetimeStats", b =>
                {
                    b.HasOne("cod_data_analyzer.Models.Match", "Match")
                        .WithOne("LifetimeStats")
                        .HasForeignKey("cod_data_analyzer.Models.LifetimeStats", "MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("cod_data_analyzer.Models.Match", b =>
                {
                    b.HasOne("cod_data_analyzer.Models.GameMode", "GameMode")
                        .WithMany()
                        .HasForeignKey("GameModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cod_data_analyzer.Models.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cod_data_analyzer.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("GameMode");

                    b.Navigation("Map");

                    b.Navigation("User");
                });

            modelBuilder.Entity("cod_data_analyzer.Models.PlayerStats", b =>
                {
                    b.HasOne("cod_data_analyzer.Models.Match", "Match")
                        .WithOne("PlayerStats")
                        .HasForeignKey("cod_data_analyzer.Models.PlayerStats", "MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("cod_data_analyzer.Models.XpStats", b =>
                {
                    b.HasOne("cod_data_analyzer.Models.Match", "Match")
                        .WithOne("XpStats")
                        .HasForeignKey("cod_data_analyzer.Models.XpStats", "MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("cod_data_analyzer.Models.GameTitle", b =>
                {
                    b.Navigation("GameModes");
                });

            modelBuilder.Entity("cod_data_analyzer.Models.GameType", b =>
                {
                    b.Navigation("GameModes");
                });

            modelBuilder.Entity("cod_data_analyzer.Models.Match", b =>
                {
                    b.Navigation("LifetimeStats");

                    b.Navigation("PlayerStats");

                    b.Navigation("XpStats");
                });
#pragma warning restore 612, 618
        }
    }
}
