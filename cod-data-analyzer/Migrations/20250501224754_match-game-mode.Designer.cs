// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using cod_data_analyzer.Data;

#nullable disable

namespace cod_data_analyzer.Migrations
{
    [DbContext(typeof(MultiplayerDataDatabaseContext))]
    [Migration("20250501224754_match-game-mode")]
    partial class matchgamemode
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("cod_data_analyzer.Models.GameMode", b =>
                {
                    b.Property<int>("GameModeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameModeId"));

                    b.Property<string>("GameModeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GameTitleId")
                        .HasColumnType("int");

                    b.Property<int>("GameTypeId")
                        .HasColumnType("int");

                    b.HasKey("GameModeId");

                    b.HasIndex("GameTitleId");

                    b.HasIndex("GameTypeId");

                    b.ToTable("GameMode");
                });

            modelBuilder.Entity("cod_data_analyzer.Models.GameTitle", b =>
                {
                    b.Property<int>("GameModeTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameModeTitleId"));

                    b.Property<string>("GameModeTitleCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GameModeTitleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GameModeTitleId");

                    b.ToTable("GameTitle");
                });

            modelBuilder.Entity("cod_data_analyzer.Models.GameType", b =>
                {
                    b.Property<int>("GameModeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameModeTypeId"));

                    b.Property<string>("GameModeTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GameModeTypeId");

                    b.ToTable("GameType");
                });

            modelBuilder.Entity("cod_data_analyzer.Models.LifetimeStats", b =>
                {
                    b.Property<int>("LifetimeStatsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LifetimeStatsId"));

                    b.Property<int>("LifetimeDeaths")
                        .HasColumnType("int");

                    b.Property<int>("LifetimeHits")
                        .HasColumnType("int");

                    b.Property<int>("LifetimeKills")
                        .HasColumnType("int");

                    b.Property<int>("LifetimeLosses")
                        .HasColumnType("int");

                    b.Property<int>("LifetimeMisses")
                        .HasColumnType("int");

                    b.Property<int>("LifetimeWins")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.HasKey("LifetimeStatsId");

                    b.HasIndex("MatchId")
                        .IsUnique();

                    b.ToTable("LifetimeStats");
                });

            modelBuilder.Entity("cod_data_analyzer.Models.Map", b =>
                {
                    b.Property<int>("MapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MapId"));

                    b.Property<bool>("IsFaceoff")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSmall")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpecialty")
                        .HasColumnType("bit");

                    b.Property<string>("MapName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MapId");

                    b.ToTable("Map");
                });

            modelBuilder.Entity("cod_data_analyzer.Models.Match", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchId"));

                    b.Property<int>("GameModeId")
                        .HasColumnType("int");

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MatchEnd")
                        .HasColumnType("datetime2");

                    b.Property<int>("MatchLength")
                        .HasColumnType("int");

                    b.Property<DateTime>("MatchStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("MatchWin")
                        .HasColumnType("bit");

                    b.HasKey("MatchId");

                    b.HasIndex("GameModeId");

                    b.HasIndex("MapId");

                    b.ToTable("Match");
                });

            modelBuilder.Entity("cod_data_analyzer.Models.PlayerStats", b =>
                {
                    b.Property<int>("PlayerStatsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerStatsId"));

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<int>("DamageDone")
                        .HasColumnType("int");

                    b.Property<int>("Deaths")
                        .HasColumnType("int");

                    b.Property<int>("Executions")
                        .HasColumnType("int");

                    b.Property<int>("Headshots")
                        .HasColumnType("int");

                    b.Property<int>("Hits")
                        .HasColumnType("int");

                    b.Property<int>("Kills")
                        .HasColumnType("int");

                    b.Property<int>("LongestStreak")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<double>("PercentTimeMoving")
                        .HasColumnType("float");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("Shots")
                        .HasColumnType("int");

                    b.Property<int>("Skill")
                        .HasColumnType("int");

                    b.Property<int>("Suicides")
                        .HasColumnType("int");

                    b.HasKey("PlayerStatsId");

                    b.HasIndex("MatchId")
                        .IsUnique();

                    b.ToTable("PlayerStats");
                });

            modelBuilder.Entity("cod_data_analyzer.Models.XpStats", b =>
                {
                    b.Property<int>("XpStatsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("XpStatsId"));

                    b.Property<int>("AccoladeXp")
                        .HasColumnType("int");

                    b.Property<int>("BattlepassXp")
                        .HasColumnType("int");

                    b.Property<int>("ChallengeXp")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("MatchXp")
                        .HasColumnType("int");

                    b.Property<int>("MedalXp")
                        .HasColumnType("int");

                    b.Property<int>("MiscXp")
                        .HasColumnType("int");

                    b.Property<int>("OperatorXp")
                        .HasColumnType("int");

                    b.Property<int>("RankEnd")
                        .HasColumnType("int");

                    b.Property<int>("RankStart")
                        .HasColumnType("int");

                    b.Property<int>("ScoreXp")
                        .HasColumnType("int");

                    b.Property<int>("TotalXp")
                        .HasColumnType("int");

                    b.Property<int>("WeaponXp")
                        .HasColumnType("int");

                    b.HasKey("XpStatsId");

                    b.HasIndex("MatchId")
                        .IsUnique();

                    b.ToTable("XpStats");
                });

            modelBuilder.Entity("cod_data_analyzer.Models.GameMode", b =>
                {
                    b.HasOne("cod_data_analyzer.Models.GameTitle", "GameTitle")
                        .WithMany("GameModes")
                        .HasForeignKey("GameTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cod_data_analyzer.Models.GameType", "GameType")
                        .WithMany("GameModes")
                        .HasForeignKey("GameTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameTitle");

                    b.Navigation("GameType");
                });

            modelBuilder.Entity("cod_data_analyzer.Models.LifetimeStats", b =>
                {
                    b.HasOne("cod_data_analyzer.Models.Match", "Match")
                        .WithOne("LifetimeStats")
                        .HasForeignKey("cod_data_analyzer.Models.LifetimeStats", "MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("cod_data_analyzer.Models.Match", b =>
                {
                    b.HasOne("cod_data_analyzer.Models.GameMode", "GameMode")
                        .WithMany()
                        .HasForeignKey("GameModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cod_data_analyzer.Models.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameMode");

                    b.Navigation("Map");
                });

            modelBuilder.Entity("cod_data_analyzer.Models.PlayerStats", b =>
                {
                    b.HasOne("cod_data_analyzer.Models.Match", "Match")
                        .WithOne("PlayerStats")
                        .HasForeignKey("cod_data_analyzer.Models.PlayerStats", "MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("cod_data_analyzer.Models.XpStats", b =>
                {
                    b.HasOne("cod_data_analyzer.Models.Match", "Match")
                        .WithOne("XpStats")
                        .HasForeignKey("cod_data_analyzer.Models.XpStats", "MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("cod_data_analyzer.Models.GameTitle", b =>
                {
                    b.Navigation("GameModes");
                });

            modelBuilder.Entity("cod_data_analyzer.Models.GameType", b =>
                {
                    b.Navigation("GameModes");
                });

            modelBuilder.Entity("cod_data_analyzer.Models.Match", b =>
                {
                    b.Navigation("LifetimeStats");

                    b.Navigation("PlayerStats");

                    b.Navigation("XpStats");
                });
#pragma warning restore 612, 618
        }
    }
}
